# Dieser Workflow ist als wiederverwendbar konzipiert und wird von anderen Workflows aufgerufen.
# Er enthält die gesamte Kernlogik für das Testen der Anwendung.
name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      python-version:
        required: true
        type: string
      container-image:
        required: false
        type: string
      pytest-marker:
        required: false
        type: string
        default: ""

jobs:
  test:
    name: Test on ${{ inputs.os }} with Python ${{ inputs.python-version }}
    runs-on: ${{ inputs.os }}
    container:
      image: ${{ inputs.container-image }}

    steps:
      - name: 1. Install System Prerequisites (for container)
        if: ${{ inputs.container-image }}
        run: |
          apt-get update
          apt-get install -y git python3 python3-pip python3-tk python3-pil.imagetk xvfb

      - name: 2. Checkout Code
        uses: actions/checkout@v4

      - name: 3. Set up Python
        uses: actions/setup-python@v5
        id: python-setup # Gib diesem Schritt eine ID, um auf seine Ausgaben zugreifen zu können
        with:
          python-version: ${{ inputs.python-version }}

      - name: 4. Install System Dependencies (for Linux runner)
        if: runner.os == 'Linux' && !inputs.container-image
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-pil.imagetk xvfb

      - name: 5. Install Python Dependencies (Container/PEP 668)
        if: inputs.container-image
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt -r requirements-dev.txt -r requirements-db.txt --break-system-packages
      - name: 5. Install Python Dependencies (Host)
        if: '!inputs.container-image'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt -r requirements-db.txt

      - name: 6. Run Tests with Virtual Display (Linux)
        if: runner.os == 'Linux'
        env:
          CI: "true" # Signalisiert den Tests, dass sie in einer CI-Umgebung laufen
        run: xvfb-run ${{ inputs.container-image && 'python3' || 'python' }} -m pytest -m "${{ inputs.pytest-marker }}"
      - name: 6. Run Tests (Windows/macOS)
        if: runner.os == 'Windows' || runner.os == 'macOS'
        env:
          # Für macOS: Führe Tests im "headless" Modus aus, um GUI-Fehler zu vermeiden
          MPLBACKEND: Agg
          CI: "true" # Signalisiert den Tests, dass sie in einer CI-Umgebung laufen
          # Für Windows: Setze die Pfade zu den Tcl/Tk-Bibliotheken manuell,
          # um "TclError: Can't find a usable tk.tcl" zu beheben.
          TCL_LIBRARY: "${{ env.pythonLocation }}\\tcl\\tcl8.6"
          TK_LIBRARY: "${{ steps.python-setup.outputs.python-path }}\\..\\tcl\\tk8.6"
        run: python -m pytest -m "${{ inputs.pytest-marker }}"