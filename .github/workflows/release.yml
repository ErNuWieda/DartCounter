name: Create Release

on:
  push:
    tags:
      - "v*.*.*" # Löst den Workflow aus, wenn ein Tag wie v1.2.3 gepusht wird

jobs:
  build-release:
    name: Build for ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 3. Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-tk python3-pil.imagetk

      - name: 4. Install Python Dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install pyinstaller

      - name: 5. Run Build Script
        # Das build.py Skript führt Tests aus, baut die App und erstellt das ZIP-Archiv
        run: python build.py

      - name: 6. Upload Release Assets
        uses: actions/upload-artifact@v4
        if: runner.os == 'Windows'
        with:
          name: release-asset-windows-installer
          path: |
            DartCounter_*.zip

      - name: 6. Upload Release Assets (Linux/macOS)
        uses: actions/upload-artifact@v4
        if: runner.os != 'Windows'
        with:
          name: release-asset-${{ matrix.os }}
          path: DartCounter_*.zip

  create-release:
    name: Create GitHub Release
    needs: build-release # Dieser Job wartet, bis alle Builds erfolgreich sind
    runs-on: ubuntu-latest

    permissions:
      contents: write # Notwendig, um ein Release erstellen zu können

    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Download all release assets
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: 3. Extract Release Notes from CHANGELOG.md
        id: extract_release_notes
        run: |
          # Extrahiert den Text zwischen dem neuen Versions-Header und dem nächsten '---'
          # GITHUB_OUTPUT ist der moderne Weg, um Variablen zwischen Steps zu übergeben
          VERSION_TAG=${{ github.ref_name }}
          NOTES=$(awk -v tag="## [${VERSION_TAG#v}]" '
            $0 ~ tag {f=1; next}
            f && /^---/ {exit}
            f {print}
          ' CHANGELOG.md)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 4. Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Der Name des Releases wird der Tag sein (z.B. "v1.3.0")
          name: Release ${{ github.ref_name }}
          # Der Body des Releases wird der extrahierte Text aus der CHANGELOG.md sein
          body: ${{ steps.extract_release_notes.outputs.notes }}
          # Entwürfe werden nicht automatisch veröffentlicht
          draft: true
          # Markiert das Release nicht als "pre-release"
          prerelease: false
          # Hängt alle heruntergeladenen ZIP-Dateien an das Release an
          # Das '**'-Muster durchsucht rekursiv alle Unterverzeichnisse nach ZIP-Dateien.
          files: release-assets/**/*.zip

  build-installer:
    name: Build Windows Installer
    needs: create-release # Startet erst, wenn die Assets hochgeladen sind
    runs-on: windows-latest

    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: release-asset-windows-installer
          path: release

      - name: 3. Unzip build artifact
        run: |
          Expand-Archive -Path release/DartCounter_*.zip -DestinationPath .

      - name: 4. Set up Inno Setup
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2

      - name: 5. Prepare Installer Script
        shell: pwsh
        run: |
          $version = "${{ github.ref_name }}".Substring(1)
          $sourceDir = "DartCounter_Windows_v" + $version
          $issFile = "installer/create_installer.iss"
          (Get-Content $issFile -Raw) -replace '__APP_VERSION__', $version -replace '__SOURCE_DIR__', $sourceDir | Set-Content -Path $issFile
          echo "Installer script for v$version prepared."

      - name: 6. Compile Windows Installer
        run: iscc.exe installer/create_installer.iss

      - name: 7. Upload Installer as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer/Output/DartCounter_Setup.exe

  publish-release:
    name: Publish GitHub Release
    needs: [create-release, build-installer]
    permissions:
      contents: write # Notwendig, um Assets zu einem Release hinzuzufügen
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Upload Release Assets and Publish
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Lade die einzelnen Artefakte hoch
          gh release upload ${{ github.ref_name }} release-assets/release-asset-ubuntu-latest/DartCounter_*.zip
          gh release upload ${{ github.ref_name }} release-assets/release-asset-macos-latest/DartCounter_*.zip
          gh release upload ${{ github.ref_name }} release-assets/windows-installer/DartCounter_Setup.exe

          # Veröffentliche das Release (Entwurf entfernen)
          gh release edit ${{ github.ref_name }} --draft=false
