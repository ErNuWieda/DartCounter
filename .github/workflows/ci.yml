name: Python CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created] # Wird ausgelöst, wenn ein neues Release auf GitHub veröffentlicht wird

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Code auschecken
      uses: actions/checkout@v4

    - name: Python 3.11 einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Systemabhängigkeiten für GUI-Tests installieren
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk xvfb

    - name: Python-Abhängigkeiten installieren
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest # Wird von build.py und für Tests benötigt

    - name: Tests mit virtuellem Display ausführen
      run: |
        xvfb-run python -m pytest -sv

  build_release:
    name: Build for ${{ matrix.os_name }}
    # Dieser Job wird nur ausgeführt, wenn ein neues Release auf GitHub erstellt wird
    if: github.event_name == 'release'
    needs: test # Stellt sicher, dass die Tests vor dem Build erfolgreich waren
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
          - os: windows-latest
            os_name: Windows

    steps:
    - name: Code auschecken
      uses: actions/checkout@v4

    - name: Version aus Tag extrahieren
      id: get_version
      # Entfernt das 'v' vom Tag-Namen, z.B. v1.2.0 -> 1.2.0
      shell: bash # Explizit angeben, um sicherzustellen, dass die Syntax funktioniert
      run: |
        TAG="${{ github.event.release.tag_name }}"
        echo "VERSION=${TAG#v}" >> $GITHUB_ENV

    - name: Python 3.11 einrichten
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Version in main.py aktualisieren (Linux)
      if: runner.os == 'Linux'
      run: |
        sed -i "s/self.version = .*/self.version = \"v${{ env.VERSION }}\"/" main.py

    - name: Version in main.py aktualisieren (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        (Get-Content main.py) -replace 'self.version = .*', 'self.version = "v${{ env.VERSION }}"' | Set-Content main.py

    - name: Systemabhängigkeiten installieren (nur für Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Python-Abhängigkeiten installieren
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest

    - name: Anwendung bauen
      env:
        # Übergibt die saubere Versionsnummer an das Build-Skript
        CI_VERSION: ${{ env.VERSION }}
      run: python build.py

    - name: Release-Artefakt hochladen
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./DartCounter_${{ matrix.os_name }}_v${{ env.VERSION }}.zip
        asset_name: DartCounter_${{ matrix.os_name }}_v${{ env.VERSION }}.zip
        asset_content_type: application/zip
